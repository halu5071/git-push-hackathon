apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "io.moatwel.github"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        def CLIENT_ID
        def CLIENT_SECRET
        def OAUTH_SCHEME
        def OAUTH_HOST

        def file = project.file("gradle.properties")
        if (file.exists()) {
            def properties = new Properties()
            properties.load(file.newDataInputStream())
            CLIENT_ID = properties.get("CLIENT_ID")
            CLIENT_SECRET = properties.get("CLIENT_SECRET")
            OAUTH_SCHEME = properties.get("OAUTH_SCHEME")
            OAUTH_HOST = properties.get("OAUTH_HOST")
        } else {
            CLIENT_ID = System.getenv("CLIENT_ID")
            CLIENT_SECRET = System.getenv("CLIENT_SECRET")
            OAUTH_SCHEME = System.getenv("OAUTH_SCHEME")
            OAUTH_HOST = System.getenv("OAUTH_HOST")
        }

        buildConfigField 'String', 'CLIENT_ID', "$CLIENT_ID"
        buildConfigField 'String', 'CLIENT_SECRET', "$CLIENT_SECRET"

        resValue "string", "oauth_scheme", "$OAUTH_SCHEME"
        resValue "string", "oauth_host", "$OAUTH_HOST"

        manifestPlaceholders = [
                OAUTH_SCHEME: "@string/oauth_scheme",
                OAUTH_HOST: "@string/oauth_host"
        ]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled true
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Android-KTX
    implementation 'androidx.core:core-ktx:0.1'

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Rx
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"

    // Support Library
    implementation "com.android.support:appcompat-v7:$support_lib_version"
    implementation "com.android.support:support-annotations:$support_lib_version"
    implementation "com.android.support:recyclerview-v7:$support_lib_version"
    implementation "com.android.support:support-v4:$support_lib_version"
    implementation "com.android.support:support-fragment:$support_lib_version"
    implementation "com.android.support:customtabs:$support_lib_version"
    implementation "com.android.support:support-emoji-bundled:$support_lib_version"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    // RxLifecycle
    implementation "com.trello.rxlifecycle2:rxlifecycle:$rxlifecycle_version"
    implementation "com.trello.rxlifecycle2:rxlifecycle-android:$rxlifecycle_version"
    implementation "com.trello.rxlifecycle2:rxlifecycle-components:$rxlifecycle_version"
    implementation "com.trello.rxlifecycle2:rxlifecycle-kotlin:$rxlifecycle_version"
    implementation "com.trello.rxlifecycle2:rxlifecycle-android-lifecycle-kotlin:$rxlifecycle_version"

    // Dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // Leak Canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"

    // Stetho
    implementation "com.facebook.stetho:stetho:$stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$stetho_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Moshi
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-adapters:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"

    // kotshi
    implementation "se.ansman.kotshi:api:$kotshi_version"
    kapt "se.ansman.kotshi:compiler:$kotshi_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // DataBinding
    kapt "com.android.databinding:compiler:$data_binding_version"

    // Architecture Components
    implementation "android.arch.lifecycle:extensions:$architecture_comp_version"
    implementation "android.arch.lifecycle:reactivestreams:$architecture_comp_version"
    kapt "android.arch.lifecycle:compiler:$architecture_comp_version"
    implementation "android.arch.paging:runtime:1.0.0-alpha5"

    // Encryption
    implementation "com.madgag.spongycastle:core:$spongy_castle_version"
    implementation "com.madgag.spongycastle:prov:$spongy_castle_version"
    implementation "com.github.gfx.util.encrypt:android-encrypt-utils:2.0.0"

    // Test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    testImplementation "org.mockito:mockito-core:$mockito_verion"
    testImplementation "org.powermock:powermock-core:$powermock_version"
    testImplementation "org.powermock:powermock-module-junit4:$powermock_version"
    testImplementation "org.powermock:powermock-api-mockito2:$powermock_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
    testImplementation "android.arch.core:core-testing:$architecture_comp_version"
}
repositories {
    mavenCentral()
    google()
}
ktlint {
    version = "0.14.0"
    android = true
    reporter = "checkstyle"
    ignoreFailures = true
}